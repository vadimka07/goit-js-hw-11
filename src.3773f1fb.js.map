{"version":3,"sources":["index.js"],"names":["startButton","document","querySelector","stopButton","timeoutId","startTimer","getRandomHexColor","Math","floor","random","toString","setColor","body","style","backgroundColor","addEventListener","console","log","setInterval","clearInterval","refs","getStartTime","getElementById","startCountdownTimer","updateDays","updateHours","updateMinutes","updateSeconds","dateTime","start","CountDown","constructor","onTick","timeExpired","intervalId","isActive","pad","value","padStart","convertMs","ms","days","hour","hours","minute","minutes","second","seconds","startTime","Date","getTime","Boolean","now","alert","currentTime","deltaTime","stop","time","updateTimer","textContent","delay","Promise","resolve","setTimeout","users","name","active","toggleUserState","allUsers","userName","map","user","logger","updatedUsers","table","then","randomIntegerFromInterval","min","max","makeTransaction","id","amount","reject","logSuccess","logError","warn","catch"],"mappings":"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","file":"src.3773f1fb.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n//----------------------------------task 1---------------------------------------\nconst startButton = document.querySelector('[data-start]');\nconst stopButton = document.querySelector('[data-stop]');\nlet timeoutId = null;\nlet startTimer = false;\nif(startButton) {\n  startButton.addEventListener('click',()=> {\n    if(startTimer) {\n      return\n    }\n    startTimer =true;\n    console.log('click start');\n    timeoutId = setInterval(setColor, 1000);\n  });\n\n}\nif(stopButton) {\n  stopButton.addEventListener('click', ()=> {\n    if(!startTimer) {\n      return\n    }\n    startTimer = false;\n    console.log('click stop');\n    clearInterval(timeoutId);\n  })\n}\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\nfunction setColor() {\n  document.body.style.backgroundColor = getRandomHexColor();\n}\n\n\n//----------------------------------task 2---------------------------------------\n\n\nconst refs = {\n  getStartTime :        document.getElementById('date-selector'),\n  startCountdownTimer : document.querySelector('[data-start-timer]'),\n  updateDays :          document.querySelector('[data-days]'),\n  updateHours :         document.querySelector('[data-hours]'),\n  updateMinutes :       document.querySelector('[data-minutes]'),\n  updateSeconds :       document.querySelector('[data-seconds]')\n\n}\nrefs.startCountdownTimer.addEventListener('click', function() {\n  dateTime.start();\n// console.log(new Date(refs.getStartTime.value).getTime());\n})\n\nclass CountDown {\n\n  constructor({onTick, timeExpired}) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.timeExpired = timeExpired;\n  }\n  pad(value) {\n    return value.toString().padStart(2, '0');\n  }\n  convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = this.pad(Math.floor(ms / day));\n    // Remaining hours\n    const hours = this.pad(Math.floor((ms % day) / hour));\n    // Remaining minutes\n    const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n    // Remaining seconds\n    const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n    return { days, hours, minutes, seconds };\n  }\n  start(){\n\n     if(this.isActive) {\n      return;\n    }\n\n    const startTime = new Date(refs.getStartTime.value).getTime();\n    if(!Boolean(startTime) || startTime - Date.now() <= 0) {\n      alert('Дата введена не корректно');\n      return;\n    }\n    this.isActive = true;\n    this.intervalId = setInterval(()=> {\n      const currentTime = Date.now();\n      const deltaTime = startTime - currentTime;\n      if(deltaTime <= 0) {\n        this.stop();\n\n      }\n      // const { days, hours, minutes, seconds } = this.convertMs(deltaTime);\n      const time = this.convertMs(deltaTime);\n      // console.log(time);\n      this.onTick(time);\n      // console.log(`${days}:${hours}:${minutes}:${seconds}`);\n\n\n    }, 1000)\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n\n  }\n\n}\n\nconst dateTime = new CountDown({\n  onTick: updateTimer,\n  timeExpired: refs.getStartTime.value,\n});\nconsole.log(dateTime.timeExpired);\n\nfunction updateTimer({days, hours, minutes, seconds}) {\n  refs.updateDays.textContent = days;\n  refs.updateHours.textContent = hours;\n  refs.updateMinutes.textContent = minutes;\n  refs.updateSeconds.textContent = seconds;\n\n}\n\n\n//----------------------------------task 3---------------------------------------\n\n//3.1\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  })\n};\n\n//3.2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    resolve(updatedUsers);\n  })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n//3.3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({id, amount}) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({id, time: delay});\n      }\n\n      reject(id);\n    }, delay);\n  })\n\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}